
service: persona-api
# frameworkVersion: ">=1.1.0 <2.0.0"


provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  profile: masterbruvio
  environment:
    BUCKET: ${self:custom.bucketname}
    DYNAMODB_TABLE: ${self:custom.personatable}
  variablesResolutionMode: 20210326
  lambdaHashingVersion: 20201221
  timeout: 60
  memorySize: 512
  deploymentBucket:
    name: bruvio-lambda-deployment-bucket
    serverSideEncryption: AES256
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"


functions:
  test_auth:
    handler: app/handler.endpoint_test_auth
    events:
      - http:
          path: auth
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  s3Event:
    handler: app/handler.s3Event
    events:
      - s3:
          bucket: ${self:custom.bucketname}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .zip
  list:
    handler: app/handler.list
    events:
      - http:
          path: people
          method: get
          # cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  get:
    handler: app/handler.get
    events:
      - http:
          path: search/{username}
          method: get
          # cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  delete:
    handler: app/handler.delete
    events:
      - http:
          path: delete/{username}
          method: delete
          # cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

plugins:
  - serverless-python-requirements
  - serverless-external-s3-event
  - serverless-plugin-existing-s3
  - serverless-deployment-bucket
  - serverless-aws-documentation
  - serverless-stack-output

resources:
  Resources:
    PersonaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${file(./config.json):deployment.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${file(./config.json):deployment.clientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
  Outputs:
    CognitoPoolId:
      Description: 'CognitoPool id'
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoUserPoolId
    CognitoPoolClientId:
      Description: 'CognitoUserPoolClient id'
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoUserPoolClientId
    PersonaDynamoDbTableArn:
      Description: 'PersonaDynamoDbTable Arn'
      Value: !Ref PersonaDynamoDbTable
      Export:
        Name: ${self:service}-${self:provider.stage}-PersonaDynamoDbTableId
    DataIngestionS3Bucket:
      Description: 'S3 bucket used to upload data to ingest'
      Value:  ${self:custom.bucketname}
      Export:
        Name: DataIngestionS3Bucket
custom:
  bucketname: persona-api-data-${self:provider.stage}
  personatable: persona-api-${self:provider.stage}
  userpoolclient: persona-api-${self:provider.stage}
  userpool: persona-api-${self:provider.stage}
  pythonRequirements:
   dockerizePip: true
  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: dev
  output:
    handler: output.handler
    file: .build/stack.yaml
  documentation:
    api:
      info:
        version: "0" # see note above about this being ignored
        title: "persona-api" # see note above about this being ignored
        description: "The Persona API is a fake RESTful API that delivers made up data on a few endpoints."
        contact:
          name: "bruvio"

        license:
          name: "Apache v2.0"
      tags:
        -
          name: "Data Creation"
          description: "May 2021"

    authorizers:
      -
        name: "AWS Cognito"
    resources:
      -
        path: "people/"
        description: "This is the description for people endpoint"
      -
        path: "delete/{username}"
        description: "This is the description for delete endpoint"
      -
        path: "get/{username}"
        description: "This is the description for get endpoint"
